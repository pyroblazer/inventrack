// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v5.29.3
// source: inventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "api.inventory";

/** apps/api/libs/proto/src/proto/inventory.proto */

export interface User {
  $type: "api.inventory.User";
  id: string;
  email: string;
  username: string;
}

export interface Item {
  $type: "api.inventory.Item";
  id: string;
  name: string;
  category: string;
  quantity: number;
  /** e.g., New, Good, Worn */
  condition: string;
  photoUrl: string;
  isAvailable: boolean;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  userId: string;
}

export interface GetItemsRequest {
  $type: "api.inventory.GetItemsRequest";
  user?: User | undefined;
}

/** Empty request */
export interface GetAllItemsRequest {
  $type: "api.inventory.GetAllItemsRequest";
}

export interface GetItemsResponse {
  $type: "api.inventory.GetItemsResponse";
  items: Item[];
}

export interface GetItemDetailsRequest {
  $type: "api.inventory.GetItemDetailsRequest";
  user?: User | undefined;
  itemId: string;
}

export interface ItemDetails {
  $type: "api.inventory.ItemDetails";
  item?: Item | undefined;
}

export interface CreateItemRequest {
  $type: "api.inventory.CreateItemRequest";
  user?: User | undefined;
  item?: CreateItemDto | undefined;
}

export interface UpdateItemRequest {
  $type: "api.inventory.UpdateItemRequest";
  user?: User | undefined;
  itemId: string;
  item?: CreateItemDto | undefined;
}

export interface CreateItemDto {
  $type: "api.inventory.CreateItemDto";
  name: string;
  category: string;
  quantity: number;
  condition: string;
  photoUrl: string;
  isAvailable: boolean;
}

export const API_INVENTORY_PACKAGE_NAME = "api.inventory";

function createBaseUser(): User {
  return { $type: "api.inventory.User", id: "", email: "", username: "" };
}

export const User: MessageFns<User, "api.inventory.User"> = {
  $type: "api.inventory.User" as const,

  encode(
    message: User,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

function createBaseItem(): Item {
  return {
    $type: "api.inventory.Item",
    id: "",
    name: "",
    category: "",
    quantity: 0,
    condition: "",
    photoUrl: "",
    isAvailable: false,
    userId: "",
  };
}

export const Item: MessageFns<Item, "api.inventory.Item"> = {
  $type: "api.inventory.Item" as const,

  encode(
    message: Item,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.category !== "") {
      writer.uint32(26).string(message.category);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.condition !== "") {
      writer.uint32(42).string(message.condition);
    }
    if (message.photoUrl !== "") {
      writer.uint32(50).string(message.photoUrl);
    }
    if (message.isAvailable !== false) {
      writer.uint32(56).bool(message.isAvailable);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(82).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Item {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.condition = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isAvailable = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(Item.$type, Item);

function createBaseGetItemsRequest(): GetItemsRequest {
  return { $type: "api.inventory.GetItemsRequest" };
}

export const GetItemsRequest: MessageFns<
  GetItemsRequest,
  "api.inventory.GetItemsRequest"
> = {
  $type: "api.inventory.GetItemsRequest" as const,

  encode(
    message: GetItemsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetItemsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetItemsRequest.$type, GetItemsRequest);

function createBaseGetAllItemsRequest(): GetAllItemsRequest {
  return { $type: "api.inventory.GetAllItemsRequest" };
}

export const GetAllItemsRequest: MessageFns<
  GetAllItemsRequest,
  "api.inventory.GetAllItemsRequest"
> = {
  $type: "api.inventory.GetAllItemsRequest" as const,

  encode(
    _: GetAllItemsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllItemsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetAllItemsRequest.$type, GetAllItemsRequest);

function createBaseGetItemsResponse(): GetItemsResponse {
  return { $type: "api.inventory.GetItemsResponse", items: [] };
}

export const GetItemsResponse: MessageFns<
  GetItemsResponse,
  "api.inventory.GetItemsResponse"
> = {
  $type: "api.inventory.GetItemsResponse" as const,

  encode(
    message: GetItemsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.items) {
      Item.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetItemsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(Item.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetItemsResponse.$type, GetItemsResponse);

function createBaseGetItemDetailsRequest(): GetItemDetailsRequest {
  return { $type: "api.inventory.GetItemDetailsRequest", itemId: "" };
}

export const GetItemDetailsRequest: MessageFns<
  GetItemDetailsRequest,
  "api.inventory.GetItemDetailsRequest"
> = {
  $type: "api.inventory.GetItemDetailsRequest" as const,

  encode(
    message: GetItemDetailsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.itemId !== "") {
      writer.uint32(18).string(message.itemId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetItemDetailsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetItemDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetItemDetailsRequest.$type, GetItemDetailsRequest);

function createBaseItemDetails(): ItemDetails {
  return { $type: "api.inventory.ItemDetails" };
}

export const ItemDetails: MessageFns<ItemDetails, "api.inventory.ItemDetails"> =
  {
    $type: "api.inventory.ItemDetails" as const,

    encode(
      message: ItemDetails,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.item !== undefined) {
        Item.encode(message.item, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ItemDetails {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseItemDetails();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.item = Item.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

messageTypeRegistry.set(ItemDetails.$type, ItemDetails);

function createBaseCreateItemRequest(): CreateItemRequest {
  return { $type: "api.inventory.CreateItemRequest" };
}

export const CreateItemRequest: MessageFns<
  CreateItemRequest,
  "api.inventory.CreateItemRequest"
> = {
  $type: "api.inventory.CreateItemRequest" as const,

  encode(
    message: CreateItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.item !== undefined) {
      CreateItemDto.encode(message.item, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.item = CreateItemDto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(CreateItemRequest.$type, CreateItemRequest);

function createBaseUpdateItemRequest(): UpdateItemRequest {
  return { $type: "api.inventory.UpdateItemRequest", itemId: "" };
}

export const UpdateItemRequest: MessageFns<
  UpdateItemRequest,
  "api.inventory.UpdateItemRequest"
> = {
  $type: "api.inventory.UpdateItemRequest" as const,

  encode(
    message: UpdateItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.itemId !== "") {
      writer.uint32(18).string(message.itemId);
    }
    if (message.item !== undefined) {
      CreateItemDto.encode(message.item, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.item = CreateItemDto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(UpdateItemRequest.$type, UpdateItemRequest);

function createBaseCreateItemDto(): CreateItemDto {
  return {
    $type: "api.inventory.CreateItemDto",
    name: "",
    category: "",
    quantity: 0,
    condition: "",
    photoUrl: "",
    isAvailable: false,
  };
}

export const CreateItemDto: MessageFns<
  CreateItemDto,
  "api.inventory.CreateItemDto"
> = {
  $type: "api.inventory.CreateItemDto" as const,

  encode(
    message: CreateItemDto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    if (message.condition !== "") {
      writer.uint32(34).string(message.condition);
    }
    if (message.photoUrl !== "") {
      writer.uint32(42).string(message.photoUrl);
    }
    if (message.isAvailable !== false) {
      writer.uint32(48).bool(message.isAvailable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateItemDto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateItemDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.condition = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isAvailable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(CreateItemDto.$type, CreateItemDto);

export interface InventoryServiceClient {
  getItemsByUserId(request: GetItemsRequest): Observable<GetItemsResponse>;

  getAllItems(request: GetAllItemsRequest): Observable<GetItemsResponse>;

  getItemDetails(request: GetItemDetailsRequest): Observable<ItemDetails>;

  createItem(request: CreateItemRequest): Observable<Item>;

  updateItem(request: UpdateItemRequest): Observable<Item>;

  deleteItem(request: GetItemDetailsRequest): Observable<Item>;
}

export interface InventoryServiceController {
  getItemsByUserId(
    request: GetItemsRequest,
  ):
    | Promise<GetItemsResponse>
    | Observable<GetItemsResponse>
    | GetItemsResponse;

  getAllItems(
    request: GetAllItemsRequest,
  ):
    | Promise<GetItemsResponse>
    | Observable<GetItemsResponse>
    | GetItemsResponse;

  getItemDetails(
    request: GetItemDetailsRequest,
  ): Promise<ItemDetails> | Observable<ItemDetails> | ItemDetails;

  createItem(
    request: CreateItemRequest,
  ): Promise<Item> | Observable<Item> | Item;

  updateItem(
    request: UpdateItemRequest,
  ): Promise<Item> | Observable<Item> | Item;

  deleteItem(
    request: GetItemDetailsRequest,
  ): Promise<Item> | Observable<Item> | Item;
}

export function InventoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getItemsByUserId",
      "getAllItems",
      "getItemDetails",
      "createItem",
      "updateItem",
      "deleteItem",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod("InventoryService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod("InventoryService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const INVENTORY_SERVICE_NAME = "InventoryService";

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
